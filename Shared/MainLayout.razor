@inherits LayoutComponentBase
@inject NavigationManager nav

<MudThemeProvider Theme="OTPTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>OtherPeopleRecords</PageTitle>

<div class="page mud-theme-primary">
    @*
    <div class="sidebar">
        <NavMenu />
    </div> *@

    <main>
        <CascadingAuthenticationState>
            @if (HasLoaded)
            {
                @if (IsMobile)
                {
                    <MudAppBar  Style="background-color: rgba(0, 0, 0, 0.3); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px);" Fixed="true" Dense="true" Elevation="1">
                        <MudIconButton OnClick="@(()=>nav.NavigateTo("/"))" Icon="@Iconos.OTPLogo" Color="Color.Inherit" Edge="Edge.Start" />
                        <MudSpacer />
                                <MudText Typo="Typo.body1">OTHER PEOPLE RECORDS</MudText>
                        <MudSpacer />
                        <MudIconButton Class="pa-0 ma-0" Icon="@Icons.Material.Filled.Menu" Variant="Variant.Text" Color="Color.Info" Size="Size.Medium" OnClick="@(() => OpenDrawer())" />
                    </MudAppBar>

                    <MudDrawer @bind-Open="@open" Anchor="Anchor.Start" Elevation="1" Variant="@DrawerVariant.Temporary" Color="Color.Primary">
                        <MudDrawerHeader Class="d-flex jusify-center align-center">
                            <MudIconButton OnClick="@(()=>Nav("/"))" Icon="@Iconos.OTPLogo" Color="Color.Inherit" Edge="Edge.Start" />
                            <MudText Typo="Typo.h6">OtherPeopleRecords</MudText>
                        </MudDrawerHeader>
                        <MudNavMenu>
                            <MudButton OnClick="@(()=>Nav("/"))" Href="/" IconClass="IconSizeLarge" IconSize="Size.Medium" Class="d-flex justify-start rounded-lg ma-4" Variant="Variant.Filled" StartIcon="@Iconos.Home" Color="Color.Tertiary"><MudText Typo="Typo.h3">Inicio</MudText></MudButton>
                            <MudButton OnClick="@(()=>Nav("/artists"))" Href="/" IconClass="IconSizeLarge" IconSize="Size.Medium" Class="d-flex justify-start rounded-lg ma-4" Variant="Variant.Filled" StartIcon="@Iconos.Artist" Color="Color.Tertiary"><MudText Typo="Typo.h3">Artistas</MudText></MudButton>
                            <MudButton OnClick="@(()=>Nav("/events"))"  Href="/" IconClass="IconSizeLarge" IconSize="Size.Medium" Class="d-flex justify-start rounded-lg ma-4" Variant="Variant.Filled" StartIcon="@Iconos.Event" Color="Color.Tertiary"><MudText Typo="Typo.h3">Eventos</MudText></MudButton>
                            <MudButton OnClick="@(()=>Nav("/studios"))" Href="/" IconClass="IconSizeLarge" IconSize="Size.Medium" Class="d-flex justify-start rounded-lg ma-4" Variant="Variant.Filled" StartIcon="@Iconos.Studio" Color="Color.Tertiary"><MudText Typo="Typo.h3">Estudios</MudText></MudButton>
                            <MudButton OnClick="@(()=>Nav("/contact"))" Href="/" IconClass="IconSizeLarge" IconSize="Size.Medium" Class="d-flex justify-start rounded-lg ma-4" Variant="Variant.Filled" StartIcon="@Iconos.Contact" Color="Color.Tertiary"><MudText Typo="Typo.h3">Contacto</MudText></MudButton>
                            <LoginDisplay isNavDrawer=true />
                        </MudNavMenu>
                    </MudDrawer>
                }
                else
                {
                    <MudAppBar Style="background-color: rgba(0, 0, 0, 0.3); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px);" Fixed="true" Dense="true" Elevation="1">
                        <MudIconButton OnClick="@(()=>nav.NavigateTo("/"))" Icon="@Iconos.OTPLogo" Color="Color.Inherit" Edge="Edge.Start" />
                        <MudSpacer />
                        <MudStack Row="true">
                            <MudButton OnClick="@(()=>nav.NavigateTo("/"))" Size="Size.Small" Variant="Variant.Text" Color="Color.Info">INICIO</MudButton>
                            <MudButton OnClick="@(()=>nav.NavigateTo("/artists"))" Size="Size.Small" Variant="Variant.Text" Color="Color.Info">ARTISTAS</MudButton>
                            <MudButton OnClick="@(()=>nav.NavigateTo("/events"))" Size="Size.Small" Variant="Variant.Text" Color="Color.Info">EVENTOS</MudButton>
                            <MudButton OnClick="@(()=>nav.NavigateTo("/studios"))" Size="Size.Small" Variant="Variant.Text" Color="Color.Info">ESTUDIOS</MudButton>
                            <MudButton OnClick="@(()=>nav.NavigateTo("/contact"))" Size="Size.Small" Variant="Variant.Text" Color="Color.Info">CONTACTO</MudButton>
                        </MudStack>
                        <MudSpacer />
                        <LoginDisplay />
                    </MudAppBar>
                }
            
                <MudContainer Class="d-flex justify-center align-center content ma-0 pa-0 mud-theme-primary" Style="width:100%; max-width: 100vw;">
                    @Body
                </MudContainer>
            }
        </CascadingAuthenticationState>
    </main>
</div>

@code{
    MudTheme OTPTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = "#131313", //Negro
                Secondary = "#9c0000", //Rojo
                Tertiary = "#4A4A4A", //Gris
                Info = "#ffffff" //blanco
            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#131313", //Negro
                Secondary = "#9c0000", //Rojo
                Tertiary = "#4A4A4A", //Gris
                Info = "#ffffff" //blanco
            },

            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "260px",
                DrawerWidthRight = "300px"
            },
            Typography = new Typography()
            {
                H3 = new H3()
                {
                    FontFamily = new[] { "Open Sans" },
                    FontSize = "min(max(20px, 4vw), 200px)!important;",
                    FontWeight = 500,
                    LineHeight = 1,
                    LetterSpacing = ".0075em"
                },
                H2 = new H2()
                {
                    FontFamily = new[] { "Open Sans" },
                    FontSize = "min(max(10px, 2.5vw), 200px)!important;",
                    FontWeight = 500,
                    LineHeight = 1,
                    LetterSpacing = ".0075em"
                },
                Button = new Button()
                {
                    FontFamily = new[] { "Open Sans" },
                    FontSize = "min(max(7px, 1.5vw), 200px)!important;",
                    FontWeight = 500,
                    LineHeight = 1.6,
                    LetterSpacing = ".0075em"
                }
            }
        };

    bool IsMobile { get; set; }
    bool HasLoaded = false;

    private void Nav(string navURL){
        nav.NavigateTo(navURL);
        open = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HasLoaded = true;
            IsMobile = await IsMobileDevice();
            StateHasChanged(); // Forzar una actualización de la interfaz de usuario después de recibir el resultado.
        }
    }

    async Task<bool> IsMobileDevice()
    {
        // Obtiene el agente de usuario del navegador directamente.
        var userAgent = await JSRuntime.InvokeAsync<string>("eval", "navigator.userAgent");

        // Verifica si el navegador está en un dispositivo móvil utilizando el agente de usuario.
        return userAgent.Contains("Android") || userAgent.Contains("webOS") || userAgent.Contains("iPhone")
            || userAgent.Contains("iPad") || userAgent.Contains("iPod") || userAgent.Contains("BlackBerry")
            || userAgent.Contains("IEMobile") || userAgent.Contains("Opera Mini");
    }


    // Inyecta el servicio IJSRuntime para llamar a JavaScript desde C#.
    [Inject]
    IJSRuntime JSRuntime { get; set; }

    bool open;

    void OpenDrawer()
    {
        open = true;
    }
}